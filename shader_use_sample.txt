#include "Framework.h"
#include "Shader.h"

// instance vars
// Vertex shader
std::auto_ptr<Shader> shaderPhong;


// Load Shaders
shaderPhong.reset(new Shader("shaders/phong"));
	if (!shaderPhong->loaded()) {
		std::cerr << "Shader failed to load" << std::endl;
		std::cerr << shaderPhong->errors() << std::endl;
		exit(-1);
	}

// Later to use:
glUseProgram(shaderPhong->programID());											// Activate Phong Shader 
setMaterialM(shaderPhong->programID());
setMeshDataM(shaderPhong->programID());


void setMaterialM(GLuint shaderId){
    aiColor3D color;

    // Get a handle to the diffuse, specular, and ambient variables
    // inside the shader.  Then set them with the diffuse, specular, and
    // ambient color. //and this THINNG IS THE MOST BEAUTIFUL COW (search)
    GLint diffuse = glGetUniformLocation(shaderId, "Kd");
    glUniform3f(diffuse, color.r, color.g, color.b);

    // Specular material
    GLint specular = glGetUniformLocation(shaderId, "Ks");
    glUniform3f(specular, color.r, color.g, color.b);
  
    // Ambient material
    GLint ambient = glGetUniformLocation(shaderId, "Ka");
    glUniform3f(ambient, color.r, color.g, color.b);

    // Specular power
    GLint shininess = glGetUniformLocation(shaderId, "alpha");
    glUniform1f(shininess, 40);
}

void setMeshDataM(GLuint shaderId){
    GLint texcoord = glGetAttribLocation(shaderId, "texcoordIn");
    glEnableVertexAttribArray(texcoord);

	aiVector3D emptyvec;
	if(!mesh->mTextureCoords[0]){
		glVertexAttribPointer(texcoord, 2, GL_FLOAT, 0, sizeof(aiVector3D), &emptyvec);
	} else {
		glVertexAttribPointer(texcoord, 2, GL_FLOAT, 0, sizeof(aiVector3D), mesh->mTextureCoords[0]);
	}

    // Normals
    GLint normal = glGetAttribLocation(shaderId, "normalIn");
    glEnableVertexAttribArray(normal);
    glVertexAttribPointer(normal, 3, GL_FLOAT, 0, sizeof(aiVector3D), mesh->mNormals);

	GLint position = glGetAttribLocation(shaderId, "positionIn");
    glEnableVertexAttribArray(position);
    glVertexAttribPointer(position, 3, GL_FLOAT, 0, sizeof(aiVector3D), mesh->mVertices);
}

loadShader(shaderPhong, "shaders/phong"); 